import { jwtService } from '../utils/jwt';
import { passwordService } from '../utils/password';

/**
 * –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏
 */
export class JWTExamples {
  
  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
   */
  static demonstrateBasicJWT(): void {
    console.log('\nüîê === Basic JWT Example ===');
    
    // –°–æ–∑–¥–∞–µ–º payload –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    const payload = {
      userId: 'user123',
      email: 'user@example.com',
      role: 'user'
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = jwtService.generateAccessToken(payload);
    console.log('Generated JWT Token:', token);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    try {
      const verified = jwtService.verifyAccessToken(token);
      console.log('Verified Payload:', verified);
    } catch (error) {
      console.error('Token verification failed:', error);
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    const decoded = jwtService.decodeToken(token);
    console.log('Decoded Token (without verification):', decoded);
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è refresh —Ç–æ–∫–µ–Ω–æ–≤
   */
  static demonstrateRefreshTokens(): void {
    console.log('\nüîÑ === Refresh Token Example ===');
    
    const userId = 'user123';
    const tokenId = 'token456';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh —Ç–æ–∫–µ–Ω
    const refreshToken = jwtService.generateRefreshToken(userId, tokenId);
    console.log('Generated Refresh Token:', refreshToken);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh —Ç–æ–∫–µ–Ω
    try {
      const verified = jwtService.verifyRefreshToken(refreshToken);
      console.log('Verified Refresh Token Payload:', verified);
    } catch (error) {
      console.error('Refresh token verification failed:', error);
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   */
  static demonstrateTokenExpiration(): void {
    console.log('\n‚è∞ === Token Expiration Example ===');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
    const payload = {
      userId: 'user123',
      email: 'user@example.com',
      role: 'user'
    };

    const shortLivedToken = jwtService.generateAccessToken(payload);
    console.log('Short-lived token created');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const expirationTime = jwtService.getTokenExpirationTime(shortLivedToken);
    console.log('Token expires at:', expirationTime);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
    const isExpired = jwtService.isTokenExpired(shortLivedToken);
    console.log('Is token expired?', isExpired);
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏
   */
  static async demonstratePasswordHandling(): Promise<void> {
    console.log('\nüîí === Password Handling Example ===');
    
    const password = 'MySecurePassword123!';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
    const validation = passwordService.validatePasswordStrength(password);
    console.log('Password validation:', validation);

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await passwordService.hashPassword(password);
    console.log('Hashed password:', hashedPassword);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isMatch = await passwordService.comparePassword(password, hashedPassword);
    console.log('Password matches:', isMatch);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
    const randomPassword = passwordService.generateRandomPassword(16);
    console.log('Generated random password:', randomPassword);
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  static demonstrateFullAuthCycle(): void {
    console.log('\nüîÑ === Full Authentication Cycle ===');
    
    // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
    console.log('1. User registration');
    const userData = {
      email: 'newuser@example.com',
      password: 'SecurePass123!',
      role: 'user'
    };

    // 2. –°–æ–∑–¥–∞–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω
    console.log('2. JWT token generation');
    const accessToken = jwtService.generateAccessToken({
      userId: 'newuser123',
      email: userData.email,
      role: userData.role
    });

    // 3. –°–æ–∑–¥–∞–µ—Ç—Å—è refresh —Ç–æ–∫–µ–Ω
    console.log('3. Refresh token generation');
    const refreshToken = jwtService.generateRefreshToken('newuser123', 'refresh123');

    // 4. –¢–æ–∫–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É
    console.log('4. Tokens sent to client');
    console.log('   Access Token:', accessToken.substring(0, 50) + '...');
    console.log('   Refresh Token:', refreshToken.substring(0, 50) + '...');

    // 5. –ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç access —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('5. Client uses access token for requests');
    try {
      const verified = jwtService.verifyAccessToken(accessToken);
      console.log('   Token verified successfully:', verified.email);
    } catch (error) {
      console.error('   Token verification failed:', error);
    }

    // 6. –ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ access —Ç–æ–∫–µ–Ω–∞, –∫–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç refresh —Ç–æ–∫–µ–Ω
    console.log('6. Client refreshes access token');
    try {
      const refreshPayload = jwtService.verifyRefreshToken(refreshToken);
      console.log('   Refresh token verified:', refreshPayload.userId);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω
      const newAccessToken = jwtService.generateAccessToken({
        userId: refreshPayload.userId,
        email: userData.email,
        role: userData.role
      });
      console.log('   New access token generated');
    } catch (error) {
      console.error('   Refresh token verification failed:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
   */
  static async runAllExamples(): Promise<void> {
    console.log('üöÄ Starting JWT Examples...\n');
    
    try {
      this.demonstrateBasicJWT();
      this.demonstrateRefreshTokens();
      this.demonstrateTokenExpiration();
      await this.demonstratePasswordHandling();
      this.demonstrateFullAuthCycle();
      
      console.log('\n‚úÖ All examples completed successfully!');
    } catch (error) {
      console.error('\n‚ùå Error running examples:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default JWTExamples;
